<?php

use Drupal\views\ViewExecutable;
use Drupal\Core\Form\FormStateInterface;
use Drupal\simple_school_reports_list_templates\ListTemplateFormAlter;

/**
 * Implements hook_form_alter().
 */
function simple_school_reports_list_templates_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $forms_to_alter = ['node_list_template_edit_form', 'node_list_template_form'];
  if (in_array($form_id, $forms_to_alter)) {
    ListTemplateFormAlter::formAlter($form, $form_state);
  }
}

/**
 * Implements hook_field_widget_single_element_WIDGET_TYPE_form_alter().
 */
function simple_school_reports_list_templates_field_widget_single_element_entity_reference_paragraphs_form_alter(array &$element, FormStateInterface $form_state, array $context) {
  if (!empty($element['#paragraph_type']) && $element['#paragraph_type'] === 'list_template_field' && !empty($element['subform']) && isset($context['delta'])) {
    ListTemplateFormAlter::fieldFormAlter($element['subform'], $form_state, $context['delta']);
  }
}

function _simple_school_reports_list_field_type_map(): array {
  $map = [
    'gender' => 'field_gender',
    'birth_data' => 'ssr_uid_ssn',
    'caregivers' => 'field_caregivers',
    'caregiver_address' => 'field_caregivers_1',
    'caregiver_contact' => 'field_caregivers_2',
    'student_address' => 'field_address',
    'student_contact' => 'rendered_entity',
    'special_diet' => 'field_special_diet',
    'custom' => 'nothing',
  ];

  if (!\Drupal::moduleHandler()->moduleExists('simple_school_reports_special_diet')) {
    unset($map['special_diet']);
  }

  return $map;
}

/**
 * Implements hook_views_query_alter().
 */
function simple_school_reports_list_templates_views_query_alter(ViewExecutable $view, \Drupal\views\Plugin\views\query\QueryPluginBase $query) {
  if ($view->id() === 'list_template_support') {

    $grade_filter = [];
    foreach (simple_school_reports_core_allowed_user_grade() as $key => $label) {
      $grade_filter[$key] = (string) $key;
    }
    $explicit_uids = [];

    $template_node = \Drupal::routeMatch()->getParameter('node');
    if ($template_node instanceof \Drupal\node\NodeInterface && $template_node->bundle() === 'list_template') {
      $use_classes = \Drupal::moduleHandler()->moduleExists('simple_school_reports_class');
      if ($template_node->get('field_mentoring_students')->value) {
        /** @var \Drupal\simple_school_reports_core\Service\UserMetaDataServiceInterface $user_meta_data_service */
        $user_meta_data_service = \Drupal::service('simple_school_reports_core.user_meta_data');

        foreach ($user_meta_data_service->getMentorStudents(\Drupal::currentUser()->id()) as $uid) {
          $explicit_uids[] = (string) $uid;
        }

        if (empty($explicit_uids)) {
          $explicit_uids[] = '0';
        }
      }
      elseif ($use_classes && $template_node->get('field_use_classes')->value) {
        /** @var \Drupal\simple_school_reports_class_support\Service\SsrClassServiceInterface $classes_service */
        $classes_service = \Drupal::service('simple_school_reports_class_support.class_service');

        foreach (array_column($template_node->get('field_classes')->getValue(), 'target_id') as $class_id) {
          $explicit_uids = array_merge($explicit_uids, $classes_service->getStudentIdsByClassId($class_id));
        }

        if (empty($explicit_uids)) {
          $explicit_uids[] = '0';
        }
      }
      else {
        $grade_filter = [];
        foreach (array_column($template_node->get('field_grades')->getValue(), 'value') as $grade_key) {
          $grade_filter[(int) $grade_key] = (string) $grade_key;
        }
      }
    }

    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        // Alter grade filter.
        if (!empty($condition['field']) && $condition['field'] === 'user__field_grade.field_grade_value IN(:user__field_grade_field_grade_value[])') {
          if (empty($grade_filter)) {
            $grade_filter = [
              -999 => '-999',
            ];
          }
          $condition['value'][':user__field_grade_field_grade_value[]'] = $grade_filter;
        }

        if (!empty($explicit_uids)) {
          if (!empty($condition['field']) && $condition['field'] === 'users_field_data.uid') {
            $condition['value'] = '^' . implode('$|^', array_unique($explicit_uids)) . '$';
          }
        }
      }
    }
  }
}

/**
 * Implements hook_views_pre_build().
 */
function simple_school_reports_list_templates_views_pre_build(ViewExecutable $view) {
  if ($view->id() === 'list_template_support') {
    $template_node = \Drupal::routeMatch()->getParameter('node');
    if ($template_node instanceof \Drupal\node\NodeInterface && $template_node->bundle() === 'list_template') {
      // Handle fields.
      $original_fields = $view->field;

      $checkbox_key = 'uid';
      $mandatory_field_keys = ['uid_1', $checkbox_key, 'name',];
      $use_checkbox = $template_node->get('field_show_checkbox')->value;
      $fields = [];
      foreach ($mandatory_field_keys as $field_key) {
        if ($field_key === $checkbox_key && !$use_checkbox) {
          continue;
        }
        if (isset($original_fields[$field_key])) {

          $fields[$field_key] = $original_fields[$field_key];
        }
      }
      $field_type_map = _simple_school_reports_list_field_type_map();

      /** @var \Drupal\paragraphs\ParagraphInterface $field_paragraph */
      foreach ($template_node->get('field_list_template_field')->referencedEntities() as $field_paragraph) {
        $field_type = $field_paragraph->get('field_field_type')->value ?? 'none';
        $field_label = NULL;

        if ($field_type === 'custom') {
          $field_label = $field_paragraph->get('field_label')->value ?? '';
        }

        $field_key = $field_type_map[$field_type] ?? NULL;
        if ($field_key && isset($original_fields[$field_key])) {
          /** @var \Drupal\views\Plugin\views\field\EntityField $field */
          $field = clone $original_fields[$field_key];
          if ($field_type === 'custom') {
            $field_key .= '_' . $field_paragraph->id();
          }
          if ($field_label !== NULL) {
            $field->options['label'] = $field_label;
          }
          $fields[$field_key] = $field;
        }
      }
      $view->field = $fields;

      // Handle sort by.
      $original_sort_by = $view->sort;
      $sort_by_setting = $template_node->get('field_sorting')->value ?? NULL;
      $sort_by_map = [
        'name' => ['field_first_name_value', 'field_last_name_value'],
        'grade_name' => ['field_grade_value', 'field_first_name_value', 'field_last_name_value'],
        'gender_name' => ['field_gender_value', 'field_first_name_value', 'field_last_name_value'],
        'grade_gender_name' => ['field_grade_value', 'field_gender_value', 'field_first_name_value', 'field_last_name_value'],
      ];

      $sort_by = [];
      if (empty($sort_by_setting) || empty($sort_by_map[$sort_by_setting])) {
        $sort_by = $original_sort_by;
      }
      else {
        foreach ($sort_by_map[$sort_by_setting] as $sort_by_key) {
          if (isset($original_sort_by[$sort_by_key])) {
            $sort_by[$sort_by_key] = $original_sort_by[$sort_by_key];
          }
        }
      }

      $view->sort = $sort_by;
    }
  }
}

/**
 * Implements hook_views_pre_view().
 */
function simple_school_reports_list_templates_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if ($view->id() === 'list_template_support') {
    $view->element['#cache']['contexts'][] = 'route';
    $view->element['#cache']['contexts'][] = 'user.permissions';

    $template_node = \Drupal::routeMatch()->getParameter('node');
    if ($template_node instanceof \Drupal\node\NodeInterface) {
      $view->element['#cache']['tags'][] = 'node:' . $template_node->id();
    }
  }
}

/**
 * Implements hook_entity_operation_alter().
 */
function simple_school_reports_list_templates_entity_operation_alter(array &$operations, \Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity instanceof \Drupal\node\NodeInterface) {
    if ($entity->bundle() === 'list_template') {
      $operations['view_print'] = [
        'title' => t('View/Print'),
        'url' => \Drupal\Core\Url::fromRoute('entity.node.canonical', ['node' => $entity->id()], ['query' => ['destination' => \Drupal::service('path.current')->getPath(), 'print' => '1']]),
        'weight' => -99,
      ];

      $operations['copy_template'] = [
        'title' => t('Duplicate', [], ['context' => 'copy']),
        'url' => \Drupal\Core\Url::fromRoute('simple_school_reports_list_templates.duplicate_list_template', ['node' => $entity->id()], ['query' => ['destination' => \Drupal::service('path.current')->getPath()]]),
        'weight' => -98,
      ];
    }
  }
}

/**
 * Implements hook_ssr_local_actions_alter().
 */
function simple_school_reports_list_templates_ssr_local_actions_alter(array &$local_actions, \Drupal\Core\Cache\CacheableMetadata $cache, array $context) {
  if ($context['route_name'] === 'entity.node.canonical') {
    $list_template_node = $context['current_request']->get('node');
    if ($list_template_node instanceof \Drupal\node\NodeInterface && $list_template_node->bundle() === 'list_template') {
      $cache->addCacheableDependency($list_template_node);
      $cache->addCacheContexts(['user.permissions']);

      $local_actions['print_action'] = [
        '#theme' => 'menu_local_action',
        '#link' => [
          'title' => t('Print out'),
          'url' => \Drupal\Core\Url::fromUserInput('#'),
          'localized_options' => [
            'attributes' => [
              'class' => [
                'action--ssr-print',
              ],
            ],
          ],
        ],
        '#access' => \Drupal\Core\Access\AccessResult::allowedIf($list_template_node->access('view')),
        '#weight' => 10,
      ];
    }
  }
}

