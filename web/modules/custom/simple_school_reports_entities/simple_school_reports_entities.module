<?php

/**
 * @file
 * Provides a signing entity type.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Render\Element;
use Drupal\simple_school_reports_entities\Entity\SsrSigning;
use Drupal\simple_school_reports_entities\SsrConsentAnswerInterface;
use Drupal\user\UserInterface;
use Drupal\simple_school_reports_entities\SsrSigningInterface;
use Drupal\simple_school_reports_entities\Entity\SsrMeeting;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function simple_school_reports_entities_theme() {
  return [
    'ssr_signing' => [
      'render element' => 'elements',
    ],
    'ssr_consent_answer' => [
      'render element' => 'elements',
    ],
    'ssr_meeting' => [
      'render element' => 'elements',
    ],
    'school_week' => [
      'render element' => 'elements',
    ],
    'school_week_deviation' => [
      'render element' => 'elements',
    ],
    'ssr_student_leave_application' => [
      'render element' => 'elements',
    ],
    'ssr_calendar_event' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for signing templates.
 *
 * Default template: ssr-signing.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the signing information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_ssr_signing(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function simple_school_reports_entities_signing_types() {
  return [
    SsrSigningInterface::SIGNING_TYPE_EMAIL => t('Email'),
  ];
}

function simple_school_reports_entities_school_week_deviation_grades() {
  $grades = simple_school_reports_core_allowed_user_grade();
  unset($grades[-99]);
  unset($grades[99]);

  // @todo check if grade has a school week setting, suffix name if not.

  return $grades;
}

function simple_school_reports_student_leave_application_states() {
  return [
    'pending' => t('Pending'),
    'approved' => t('Approved'),
    'rejected' => t('Rejected'),
  ];
}

/**
 * Prepares variables for consent answer templates.
 *
 * Default template: ssr-consent-answer.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the consent answer information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_ssr_consent_answer(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function simple_school_reports_entities_answer_types() {
  return [
    SsrConsentAnswerInterface::CONSENT_ANSWER_ACCEPTED => 'Accepterad',
    SsrConsentAnswerInterface::CONSENT_ANSWER_REJECTED => 'Avvisad',
  ];
}

function simple_school_reports_entities_school_week_types() {
  return [
    'default' => t('Regular'),
    'student_schema' => t('Schema for student'),
  ];
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function simple_school_reports_entities_ssr_consent_answer_delete(SsrConsentAnswerInterface $entity) {
  if ($signing = $entity->get('signing')->entity) {
     $signing->delete();
  }
}

/**
 * Prepares variables for meeting templates.
 *
 * Default template: ssr-meeting.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the meeting information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_ssr_meeting(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for school week templates.
 *
 * Default template: school-week.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the school week information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_school_week(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for school week deviation templates.
 *
 * Default template: school-week-deviation.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the school week deviation information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_school_week_deviation(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for student leave application templates.
 *
 * Default template: ssr-student-leave-application.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the student leave application information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_ssr_student_leave_application(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function simple_school_reports_entities_inline_entity_form_entity_form_alter(array &$entity_form, FormStateInterface &$form_state) {
  if ($entity_form['#entity_type'] == 'school_week') {
    \Drupal\simple_school_reports_entities\Form\SchoolWeekForm::alterFieldCopy($entity_form, $form_state);
  }
}

/**
 * Prepares variables for calendar event templates.
 *
 * Default template: ssr-calendar-event.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the calendar event information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_ssr_calendar_event(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }


}

/**
 * Implements hook_views_data_alter().
 */
function simple_school_reports_entities_views_data_alter(array &$data) {
  if (isset($data['ssr_calendar_event'])) {
    $data['ssr_calendar_event']['ssr_calendar_event_bulk_form'] = [
      'title' => t('Calendar event operations bulk form'),
      'help' => t('Add a form element that lets you run operations on multiple calendar events.'),
      'field' => [
        'id' => 'ssr_calendar_event_bulk_form',
      ],
    ];
  }
}


