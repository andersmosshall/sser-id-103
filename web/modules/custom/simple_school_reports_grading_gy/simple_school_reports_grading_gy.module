<?php

declare(strict_types=1);

use Drupal\simple_school_reports_core\SchoolTypeHelper;
use Drupal\node\NodeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\Core\Cache\CacheableMetadata;

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function simple_school_reports_grading_gy_node_access(NodeInterface $entity, $operation, AccountInterface $account) {
  $operations_to_handle = ['register_course_grades_gy', 'unlock_register_course_grades_gy', 'view_course_grades_gy'];

  if (in_array($operation, $operations_to_handle) && $entity->bundle() === 'course') {
    /** @var \Drupal\simple_school_reports_grade_support\Service\GradableCourseServiceInterface $gradable_course_service */
    $gradable_course_service = \Drupal::service('simple_school_reports_grade_support.gradable_course');
    $school_types = SchoolTypeHelper::getSchoolTypeVersions('GY');
    $allowed_syllabuses = $gradable_course_service->getGradableSyllabusIds($school_types);
    if (!in_array($entity->get('field_syllabus')->target_id, $allowed_syllabuses)) {
      return AccessResult::neutral()->addCacheableDependency($entity);
    }

    $allowed = FALSE;

    switch ($operation) {
      case 'register_course_grades_gy':
        $allowed = $gradable_course_service->allowGradeRegistration($entity, $account);
        break;
      case 'unlock_register_course_grades_gy':
        $allowed = $gradable_course_service->allowUnlockGradeRegistration($entity, $account);
        break;
      case 'view_course_grades_gy':
        $allowed = $gradable_course_service->allowViewGrades($entity, $account);
    }

    return AccessResult::allowedIf($allowed)
      ->addCacheableDependency($entity)
      ->addCacheContexts(['user'])
      ->addCacheTags(['user_' . $account->id(), 'ssr_grade_reg_course_list']);
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_entity_operation_alter().
 */
function simple_school_reports_grading_gy_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ($entity->getEntityTypeId() === 'ssr_grade_reg_course') {
    /** @var \Drupal\node\NodeInterface $course */
    $course = $entity->get('course')->entity;
    if ($course?->bundle() === 'course') {
      $gradable_course_service = \Drupal::service('simple_school_reports_grade_support.gradable_course');
      $school_types = SchoolTypeHelper::getSchoolTypeVersions('GY');
      $allowed_syllabuses = $gradable_course_service->getGradableSyllabusIds($school_types);
      if (!in_array($course->get('field_syllabus')->target_id, $allowed_syllabuses)) {
        return;
      }

      if ($course->access('register_course_grades')) {
        $operations['register_grades'] = [
          'title' => t('Register grades'),
          'url' => Url::fromRoute('simple_school_reports_grading_gy.register_course_grades', ['node' => $course->id()], ['query' => ['destination' => \Drupal::service('path.current')->getPath()]]),
          'weight' => -99,
        ];
      }

      if ($course->access('view_course_grades')) {
        $operations['view_grades'] = [
          'title' => t('View grades'),
          'url' => Url::fromRoute('simple_school_reports_grading_gy.view_course_grades', ['node' => $course->id()]),
          'weight' => -98,
        ];
      }
    }
  }
}

/**
 * Implements hook_ssr_local_actions_alter().
 */
function simple_school_reports_grading_gy_ssr_local_actions_alter(array &$local_actions, CacheableMetadata $cache, array $context) {
  if ($context['route_name'] === 'simple_school_reports_grading_gy.view_course_grades') {
    /** @var \Drupal\Core\Routing\RouteMatchInterface $route_match */
    $route_match = $context['route_match'];
    $node = $route_match->getParameter('node');
    if ($node instanceof NodeInterface && $node->bundle() === 'course') {
      $cache->addCacheTags(['node:' . $node->id(), 'user:' . \Drupal::currentUser()->id(), 'ssr_grade_reg_course_list']);
      $cache->addCacheContexts(['user', 'route']);
      $destination = $context['current_request']->get('destination');
      if (!$destination) {
        $destination = $context['path.current']->getPath();
      }

      $access_reg_course_grades = $node->access('register_course_grades_gy', NULL, TRUE);
      $cache->addCacheableDependency($access_reg_course_grades);
      if ($access_reg_course_grades->isAllowed()) {
        $local_actions['register_grades'] = [
          '#theme' => 'menu_local_action',
          '#link' => [
            'title' => t('Register grades'),
            'url' => Url::fromRoute('simple_school_reports_grading_gy.register_course_grades', ['node' => $node->id()], ['query' => ['destination' => $destination]]),
          ],
          '#weight' => 10,
        ];
      }

      $access_unlock_course_grades = $node->access('register_course_grades_gy', NULL, TRUE);
      $cache->addCacheableDependency($access_reg_course_grades);
      if ($access_unlock_course_grades->isAllowed()) {
        $local_actions['unlock_register_grades'] = [
          '#theme' => 'menu_local_action',
          '#link' => [
            'title' => t('Unlock grade registration'),
            'url' => Url::fromRoute('simple_school_reports_grading_gy.unlock_register_course_grades', ['node' => $node->id()], ['query' => ['destination' => $destination]]),
          ],
          '#weight' => 10,
        ];
      }
    }
  }
}
