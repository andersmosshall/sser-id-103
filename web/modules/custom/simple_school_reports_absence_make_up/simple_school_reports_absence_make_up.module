<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Site\Settings;
use Drupal\simple_school_reports_absence_make_up\CourseAttendanceReportAbsenceMakeupFormAlter;
use Drupal\simple_school_reports_core\Service\ReplaceTokenServiceInterface;


/**
 * Implements hook_course_attendance_report_step_two_alter().
 */
function simple_school_reports_absence_make_up_course_attendance_report_step_two_alter(&$form, FormStateInterface $form_state, array &$context) {
  if ($context['subject_code'] === 'CBT') {
    $context['handled'] = TRUE;
    CourseAttendanceReportAbsenceMakeupFormAlter::formStepTwo($form, $form_state);
  }
}

/**
 * Implements hook_invalid_absence_student_statistics_table_alter().
 */
function simple_school_reports_absence_make_up_invalid_absence_student_statistics_table_alter(&$table, array &$context) {
  if ($context['negative_absence_time'] > 0) {
    $key = 'negative_absence_time';
    $table['table'][$key]['subject'] = [
      '#type' => 'html_tag',
      '#tag' => 'em',
      '#value' => t('Make up invalid absence'),
    ];
    $table['table'][$key]['value'] = [
      '#type' => 'html_tag',
      '#tag' => 'em',
      '#value' => '-' . $context['negative_absence_time'] . ' min',
    ];
    $table['table'][$key]['proportion'] = [
      '#type' => 'html_tag',
      '#tag' => 'em',
      '#value' => '',
    ];

    $key = 'total_sum';
    $table['table'][$key]['subject'] = [
      '#type' => 'html_tag',
      '#tag' => 'b',
      '#value' => t('Sum'),
    ];
    $table['table'][$key]['value'] = [
      '#type' => 'html_tag',
      '#tag' => 'b',
      '#value' => $context['sum'] - $context['negative_absence_time'] . ' min',
    ];
    $table['table'][$key]['proportion'] = [
      '#type' => 'html_tag',
      '#tag' => 'b',
      '#value' => '',
    ];
  }
}

/**
 * Implements hook_default_message_templates_alter().
 */
function simple_school_reports_absence_make_up_default_message_templates_alter(array &$default_templates) {
  $school_name = Settings::get('ssr_school_name', '');
  $default_templates['absence_make_up'] = [
    'email' => [
      'subject' => 'Påminnelse om bonustimme för [E]',
      'message' => 'Total ogiltig frånvaro för [E] uppgår till [OF] minuter. Därför vill vi påminna om att [E] ska komma till bonustimmen.' . PHP_EOL . PHP_EOL . 'Med vänliga hälsningar' . PHP_EOL . $school_name,
    ],
  ];
}

/**
 * Implements hook_message_templates_config_form_alter().
 */
function simple_school_reports_absence_make_up_message_templates_config_form_alter(array &$form, FormStateInterface $form_state, array $templates) {
  $category_name_map = [
    'absence_make_up' => t('Absence make up time'),
  ];

  /** @var ReplaceTokenServiceInterface $replace_token_service */
  $replace_token_service = \Drupal::service('simple_school_reports_core.replace_token_service');

  $description = '';
  $replace_tokens = $replace_token_service->getReplaceTokenDescriptions([
    ReplaceTokenServiceInterface::STUDENT_REPLACE_TOKENS,
    ReplaceTokenServiceInterface::RECIPIENT_REPLACE_TOKENS,
    ReplaceTokenServiceInterface::CURRENT_USER_REPLACE_TOKENS,
  ], TRUE);

  if (!empty($replace_tokens)) {
    $description_lines = ['<b>' . t('Replacement patterns') . ':</b>'];
    foreach ($replace_tokens as $token => $description) {
      $description_lines[] = $token . ' = ' . $description;
    }
    $description = implode('<br>', $description_lines);
  }

  $category_description_map = [
    'absence_make_up' => $description,
  ];

  foreach ($templates as $category => $category_templates) {
    if (empty($category_name_map[$category])) {
      continue;
    }

    $form[$category] = [
      '#type' => 'details',
      '#title' => $category_name_map[$category],
      '#tree' => TRUE,
      '#open' => TRUE,
    ];

    foreach ($category_templates as $type => $values) {
      if ($type === 'email') {
        $form[$category]['email']['subject'] = [
          '#type' => 'textfield',
          '#title' => t('Subject'),
          '#default_value' => isset($values['subject']) ? $values['subject'] : '',
          '#required' => TRUE,
        ];
        $form[$category]['email']['message'] = [
          '#type' => 'textarea',
          '#title' => t('Message'),
          '#default_value' => isset($values['message']) ? $values['message'] : '',
          '#description' => !empty($category_description_map[$category]) ? $category_description_map[$category] : NULL,
          '#required' => TRUE,
        ];
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function simple_school_reports_absence_make_up_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $store = $form_state->getStorage();
  /** @var \Drupal\views\ViewExecutable $view */
  $view = !empty($store['view']) ? $store['view'] : NULL;

  if ($view && $view->id() === 'make_up_time_reminder') {
    $form['field_make_up_time_reminded_value']['#type'] = 'select';
    unset($form['field_make_up_time_reminded_value']['#size']);
    $options = [
      0 => t('No limit'),
    ];

    for ($i = 1; $i <= 14; $i++) {
      $options[$i] = t('@days days ago', ['@days' => $i]);
    }
    $form['field_make_up_time_reminded_value']['#options'] = $options;


    $form['field_invalid_absence_value']['#type'] = 'number';
    $form['field_invalid_absence_value']['#min'] = 0;
  }
}


/**
 * Implements hook_views_query_alter().
 */
function simple_school_reports_absence_make_up_views_query_alter(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\query\QueryPluginBase $query) {
  if ($view->id() === 'make_up_time_reminder') {
    $altered = FALSE;

    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        // Alter created from condition.
        if (!empty($condition['field']) && $condition['field'] === 'user__field_make_up_time_reminded.field_make_up_time_reminded_value') {

          if ($condition['operator'] === '<' && isset($condition['value'])) {
            if ($condition['value'] >= 0 && $condition['value'] <= 365) {
              $date = new \DateTime();
              $date->setTime(23,59,59);
              $date->sub(new \DateInterval('P' . $condition['value'] . 'D'));
              $condition['value'] = $date->getTimestamp();
              $altered = TRUE;
            }
          }
        }

        // Break traverse if no field are in need of alter.
        if ($altered) {
          break 2;
        }
      }
    }
  }
}
