<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\simple_school_reports_student_di\DIRoundFormAlter;
use Drupal\simple_school_reports_student_di\DIStudentMeetingFormAlter;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_form_alter().
 */
function simple_school_reports_student_di_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $forms_to_alter = ['node_student_development_interview_edit_form', 'node_student_development_interview_form'];
  if (in_array($form_id, $forms_to_alter)) {
    $form['#after_build'][] = [DIRoundFormAlter::class, 'basicInfoHandlerAfterBuild'];

    if ($form_id === 'node_student_development_interview_form') {
      DIRoundFormAlter::newStudentDevelopmentInterviewFormAlter($form, $form_state);
    }
    else {
      if (empty($form['actions']['submit']['#submit'])) {
        $form['actions']['submit']['#submit'] = [];
      }
      $form['actions']['submit']['#submit'][] = [DIRoundFormAlter::class, 'handleRedirect'];
    }
  }

  if ($form_id === 'views_exposed_form') {
    /** @var \Drupal\views\Entity\View $view */
    if ($view = $form_state->get('view')) {
      if ($view->id() === 'student_development_interview_meetings' && $view->current_display === 'list') {
        $teachers = [
          '' => t('All'),
        ];

        /** @var \Drupal\user\UserStorageInterface $user_storage */
        $user_storage = \Drupal::entityTypeManager()->getStorage('user');

        $uids = $user_storage
          ->getQuery()
          ->accessCheck(FALSE)
          ->condition('roles', 'teacher')
          ->sort('field_first_name')
          ->sort('field_last_name')
          ->execute();

        if (!empty($uids)) {
          foreach ($user_storage->loadMultiple($uids) as $user) {
            $teachers[$user->id()] = $user->getDisplayName();
          }
        }
        unset($form['field_teachers_target_id']['#size']);
        $form['field_teachers_target_id']['#type'] = 'select';
        $form['field_teachers_target_id']['#options'] = $teachers;


        /** @var \Drupal\node\NodeInterface|string $round_node */
        $round_node = \Drupal::routeMatch()->getParameter('node');

        if ($round_node && !$round_node instanceof \Drupal\node\NodeInterface) {
          $round_node = \Drupal::entityTypeManager()->getStorage('node')->load($round_node);
        }

        if ($round_node?->bundle() === 'student_development_interview') {
          $student_group_options = [
            '' => t('All'),
          ];
          foreach ($round_node->get('field_student_groups')->referencedEntities() as $student_group) {
            $student_group_options[$student_group->id()] = $student_group->label();
          }

          unset($form['student_group']['#size']);
          $form['student_group']['#type'] = 'select';
          $form['student_group']['#options'] = $student_group_options;
        }
      }
    }
  }

  if ($form_id === 'ssr_meeting_student_di_edit_form' && $form['#form_mode'] === 'edit') {
    $form = DIStudentMeetingFormAlter::handleStudentChange($form, $form_state);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function simple_school_reports_student_di_node_delete(EntityInterface $entity) {
  if ($entity->bundle() === 'student_development_interview') {
    // Delete all student groups when development interview is deleted.
    /** @var EntityInterface $student_group */
    foreach ($entity->get('field_student_groups')->referencedEntities() as $student_group) {
       $student_group->delete();
    }
  }
}

/**
 * Implements hook_entity_operation_alter().
 */
function simple_school_reports_student_di_entity_operation_alter(array &$operations, \Drupal\Core\Entity\EntityInterface $entity) {

  if ($entity instanceof \Drupal\node\NodeInterface) {
    if ($entity->bundle() === 'student_development_interview') {
      $cache = new \Drupal\Core\Cache\CacheableMetadata();
      $cache->addCacheContexts(['user.permissions']);


      $operations['list_meetings'] = [
        'title' => t('List meetings'),
        'url' => \Drupal\Core\Url::fromRoute('view.student_development_interview_meetings.list', ['node' => $entity->id()]),
        'weight' => -90,
        '#access' => \Drupal::currentUser()->hasPermission('school staff permissions'),
      ];
      $cache->applyTo($operations['list_meetings']);
    }
  }

  if ($entity instanceof \Drupal\simple_school_reports_entities\SsrMeetingInterface) {
    if ($entity->bundle() === 'student_di') {
      $cache = new \Drupal\Core\Cache\CacheableMetadata();
      $cache->addCacheContexts(['user']);
      $cache->addCacheableDependency($entity);

      // Add cache to group and round.
      /** @var \Drupal\simple_school_reports_student_di\Service\StudentDiMeetingsServiceInterface $meeting_service */
      $meeting_service = \Drupal::service('simple_school_reports_student_di.meetings_service');
      $meeting_data = $meeting_service->getMeetingData($entity->id());

      if ($meeting_data['group_id']) {
        $cache->addCacheTags(['node:' . $meeting_data['group_id']]);
      }
      if ($meeting_data['round_id']) {
        $cache->addCacheTags(['node:' . $meeting_data['round_id']]);
      }

      foreach ($operations as $key => $operation) {
        $cache->applyTo($operations[$key]);
      }

      if (!$entity->get('field_student')->isEmpty()) {
        $operations['view_meeting'] = [
          'title' => t('View'),
          'url' => \Drupal\Core\Url::fromRoute('entity.ssr_meeting.canonical', ['ssr_meeting' => $entity->id()], ['query' => ['destination' => \Drupal::service('path.current')->getPath()]]),
          'weight' => -90,
          '#access' => $entity->access('view'),
        ];

        $cache->applyTo($operations['view_meeting']);
      }
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function simple_school_reports_student_di_views_query_alter(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\query\QueryPluginBase $query) {
  if ($view->id() === 'student_development_interview_meetings' && $view->current_display === 'list') {
    /** @var \Drupal\node\NodeInterface|string $round_node */
    $round_node = \Drupal::routeMatch()->getParameter('node');
    if (!$round_node instanceof \Drupal\node\NodeInterface) {
      $round_node = \Drupal::entityTypeManager()->getStorage('node')->load($round_node);
    }
    $student_groups = [];

    if ($round_node->bundle() === 'student_development_interview') {
      $student_groups = array_column($round_node->get('field_student_groups')->getValue(), 'target_id');
    }

    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        // Alter created from condition.
        if (!empty($condition['field']) && $condition['field'] === 'ssr_meeting_field_data.node_parent' && !empty($condition['value']) && $condition['value'] === '-1') {
          $condition['operator'] = 'in';
          $condition['value'] = $student_groups;
        }
      }
    }
  }

  if ($view->id() === 'student_di_user_list' && $view->current_display === 'available_meetings_student') {
    $student = \Drupal::routeMatch()->getParameter('user');
    if (!$student || !$student instanceof \Drupal\user\UserInterface || !$student->hasRole('student')) {
      return;
    }

    $student_groups = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'di_student_group')
      ->condition('field_student', $student->id())
      ->execute();

    if (empty($student_groups)) {
      return;
    }

    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        // Alter created from condition.
        if (!empty($condition['field']) && $condition['field'] === 'ssr_meeting_field_data.node_parent' && !empty($condition['value']) && $condition['value'] === '-1') {
          $condition['operator'] = 'in';
          $condition['value'] = array_values($student_groups);
        }
      }
    }

  }

  if ($view->id() === 'student_di_user_list' && $view->current_display === 'caregivers_my_meetings') {
    $current_user = \Drupal::currentUser();

    if (in_array('caregiver', $current_user->getRoles())) {
      /** @var \Drupal\simple_school_reports_core\Service\UserMetaDataServiceInterface $user_meta_data */
      $user_meta_data = \Drupal::service('simple_school_reports_core.user_meta_data');
      $attending = $user_meta_data->getCaregiverStudents($current_user->id());
      $attending[] = $current_user->id();

      foreach ($query->where as &$condition_group) {
        foreach ($condition_group['conditions'] as &$condition) {
          if (!empty($condition['field']) && $condition['field'] === 'ssr_meeting__attending.attending_target_id') {
            $condition['operator'] = 'in';
            $condition['value'] = $attending;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_ssr_local_actions_alter().
 */
function simple_school_reports_student_di_ssr_local_actions_alter(array &$local_actions, \Drupal\Core\Cache\CacheableMetadata $cache, array $context) {
  if ($context['route_name'] === 'view.student_development_interview_meetings.list') {
    $nid = $context['current_request']->get('node');
    if ($nid) {
      $locked = TRUE;
      $group = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
      if ($group instanceof \Drupal\node\NodeInterface && $group->bundle() === 'student_development_interview') {
        $locked = $group->get('field_locked')->value;
      }

      $cache->addCacheTags(['node:' . $nid]);
      $cache->addCacheContexts(['user.permissions']);
      $destination = $context['current_request']->get('destination');
      if (!$destination) {
        $destination = $context['path.current']->getPath();
      }
      $access = \Drupal\Core\Access\AccessResult::allowedIf(!$locked && \Drupal::currentUser()->hasPermission('school staff permissions'));
      $local_actions['meetings_create'] = [
        '#theme' => 'menu_local_action',
        '#link' => [
          'title' => t('Create meetings'),
          'url' => \Drupal\Core\Url::fromRoute('student_di.meeting_series_create', ['node' => $nid], ['query' => ['destination' => $destination]]),
        ],
        '#access' => $access,
        '#weight' => 10,
      ];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function simple_school_reports_student_di_ssr_meeting_presave(\Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->bundle() === 'student_di') {
    $teachers = array_column($entity->get('field_teachers')->getValue(), 'target_id');
    $students = array_column($entity->get('field_student')->getValue(), 'target_id');

    $attending = array_column($entity->get('attending')->getValue(), 'target_id');
    $attending_value = [];
    foreach (array_merge($teachers, $students) as $uid) {
      $attending_value[$uid] = [
        'target_id' => $uid,
      ];
      if (!in_array($uid, $attending)) {
        $attending[] = $uid;
      }
    }

    $allowed_values = array_merge($teachers, $students);
    foreach ($entity->get('field_student')->referencedEntities() as $student) {
      foreach ($student->get('field_caregivers')->referencedEntities() as $caregiver) {
        $allowed_values[] = $caregiver->id();
      }
    }

    // Filter out values that are not allowed.
    $attending = array_intersect($attending, $allowed_values);

    foreach ($attending as $uid) {
      $attending_value[$uid] = [
        'target_id' => $uid,
      ];
    }
    $entity->set('attending', array_values($attending_value));
  }

  if (!$entity->isNew() && $entity->bundle() === 'student_di') {
    // Handle meeting change.
    /** @var \Drupal\simple_school_reports_student_di\Service\StudentDiMeetingsServiceInterface $meeting_service */
    $meeting_service = \Drupal::service('simple_school_reports_student_di.meetings_service');
    /** @var \Drupal\simple_school_reports_entities\SsrMeetingInterface $entity */
    $meeting_service->handleMeetingChanged($entity);
  }

}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function simple_school_reports_student_di_ssr_meeting_delete(\Drupal\Core\Entity\EntityInterface $entity) {
  // Handle meeting change.
  if ($entity->bundle() === 'student_di') {
    // Handle meeting change.
    /** @var \Drupal\simple_school_reports_student_di\Service\StudentDiMeetingsServiceInterface $meeting_service */
    $meeting_service = \Drupal::service('simple_school_reports_student_di.meetings_service');
    /** @var \Drupal\simple_school_reports_entities\SsrMeetingInterface $entity */
    $meeting_service->handleMeetingChanged($entity, TRUE);
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function simple_school_reports_student_di_ssr_meeting_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
  $access = \Drupal\Core\Access\AccessResult::neutral();
  $cache = new \Drupal\Core\Cache\CacheableMetadata();
  $cache->addCacheableDependency($entity);
  $cache->addCacheContexts(['user', 'route']);

  /** @var \Drupal\simple_school_reports_student_di\Service\StudentDiMeetingsServiceInterface $meeting_service */
  $meeting_service = \Drupal::service('simple_school_reports_student_di.meetings_service');
  $meeting_data = $meeting_service->getMeetingData($entity->id());

  if (!empty($meeting_data['group_id'])) {
    $cache->addCacheTags(['node:' . $meeting_data['group_id']]);
  }
  if (!empty($meeting_data['round_id'])) {
    $cache->addCacheTags(['node:' . $meeting_data['round_id']]);
  }
  $access->addCacheableDependency($cache);

  if ($entity->bundle() === 'student_di') {
    $operation_list = [
      'book',
      'unbook',
      'view',
    ];

    if (in_array($operation, $operation_list)) {
      $group_id = $entity->get('node_parent')->target_id;
      if (!$group_id) {
        return $access;
      }
      $cache->addCacheTags(['node:' . $group_id]);


      $round_id = $meeting_data['round_id'] ?? NULL;

      if (!$round_id) {
        return $access;
      }

      $cache->addCacheTags(['node:' . $round_id]);
      /** @var \Drupal\Core\Session\AccountInterface $student */
      if ($student = $entity->get('field_student')->entity) {
        $cache->addCacheableDependency($student);
        if ($operation === 'view' || $operation === 'unbook') {
          return $student->access('update', $account, TRUE)->addCacheableDependency($cache);
        }

        $student_groups = $meeting_service->getStudentGroupIds($student->id());
        $student_is_in_group = isset($student_groups[$group_id]);
        $is_locked = $meeting_data['locked'];

        if ($is_locked || !$student_is_in_group) {
          return \Drupal\Core\Access\AccessResult::forbidden()->addCacheableDependency($cache);
        }

        $is_caregiver_locked = $meeting_data['locked_caregivers'];
        $user_is_school_staff = $account->hasPermission('school staff permissions');
        if ($is_caregiver_locked && !$user_is_school_staff) {
          return \Drupal\Core\Access\AccessResult::forbidden()->addCacheableDependency($cache);
        }

        if ($user_is_school_staff) {
          return $student->access('update', $account, TRUE)->addCacheableDependency($cache);
        }

        $cache->addCacheTags(['ssr_meeting_list:student_di']);
        $booked_meetings = $meeting_service->getBookedMeetingIds($student->id(), $group_id);
        foreach ($booked_meetings as $booked_meeting) {
          $meeting_data = $meeting_service->getMeetingData($booked_meeting);
          // Current user is already attending in other meetings for this
          // student in this group.
          if (isset($meeting_data['attendees'][$account->id()])) {
            return \Drupal\Core\Access\AccessResult::forbidden()->addCacheableDependency($cache);
          }
        }

        return $student->access('update', $account, TRUE)->addCacheableDependency($cache);
      }
    }

    if ($operation === 'update') {
      $locked = $meeting_data['locked'];

      if ($locked) {
        return \Drupal\Core\Access\AccessResult::forbidden()->addCacheableDependency($cache);
      }

      $teachers = array_column($entity->get('field_teachers')->getValue(), 'target_id');
      return \Drupal\Core\Access\AccessResult::allowedIf(in_array($account->id(), $teachers))->addCacheableDependency($cache);
    }

    if ($operation === 'delete') {
      $teachers = array_column($entity->get('field_teachers')->getValue(), 'target_id');
      return \Drupal\Core\Access\AccessResult::allowedIf($account->hasPermission('delete any student di meeting') || in_array($account->id(), $teachers))->addCacheableDependency($cache);
    }
  }

  return $access->addCacheableDependency($cache);

}

/**
 * Implements hook_views_pre_view().
 */
function simple_school_reports_student_di_views_pre_view(\Drupal\views\ViewExecutable $view, $display_id, array &$args) {
  if ($view->id() === 'student_development_interview_meetings' || $view->id() === 'student_di_user_list') {
    $view->element['#cache']['contexts'][] = 'user';
    $view->element['#cache']['tags'][] = 'ssr_meeting_list:student_di';
  }

  if ($view->id() === 'student_development_interview_meetings') {
    $view->element['#cache']['contexts'][] = 'user';
  }
}
